kind: pipeline
name: default
steps:

  - name: integration
    image: enigmampc/docker-client
    privileged: true
    volumes:
      - name: sock
        path: /var/run/docker.sock
    commands:
      - export MATCHING_BRANCH_CORE="$(git ls-remote --heads https://github.com/enigmampc/enigma-core.git ${DRONE_BRANCH} | wc -l)"
      - export MATCHING_BRANCH_CONTRACT="$(git ls-remote --heads https://github.com/enigmampc/enigma-contract.git ${DRONE_BRANCH} | wc -l)"
      - export MATCHING_BRANCH_DOCKER="$(git ls-remote --heads https://github.com/enigmampc/docker-environment.git ${DRONE_BRANCH} | wc -l)"
      - export MATCHING_BRANCH_INTEGRATION="$(git ls-remote --heads https://github.com/enigmampc/integration-tests.git ${DRONE_BRANCH} | wc -l)"
      - export DOCKER_TAG=p2p_${DRONE_BUILD_NUMBER}
      - |
        if [[ "$MATCHING_BRANCH_DOCKER" -eq 1 ]]; then
          # which includes master and develop because these always exist
          git clone --single-branch --branch ${DRONE_BRANCH} https://github.com/enigmampc/docker-environment.git
        else
          # otherwise we are on a feature branch, and we will build against develop
          git clone --single-branch --branch develop https://github.com/enigmampc/docker-environment.git
        fi
      - cd docker-environment && cp .env.template .env
      - sed -i "s/COMPOSE_PROJECT_NAME=.*/COMPOSE_PROJECT_NAME=enigma_p2p_${DRONE_BUILD_NUMBER}/" .env
      - sed -i "s/DOCKER_TAG=latest/DOCKER_TAG=${DOCKER_TAG}/" .env;
      - |
        /bin/bash -c '
        declare -a PROJECTS=(contract client)
        declare -A DOCKER_IMAGES=([contract]=contract [client]=client)
        declare -A PROJECT_BRANCH_FOUND=([contract]=$MATCHING_BRANCH_CONTRACT [client]=$MATCHING_BRANCH_INTEGRATION)
        for project in $${PROJECTS[@]}; do
          DOCKER_IMAGE="enigmampc/$${DOCKER_IMAGES[$project]}"
          if [[ "$DRONE_BRANCH" == "master" ]]; then
            docker pull "$DOCKER_IMAGE:latest"
            docker tag "$DOCKER_IMAGE:latest" "$DOCKER_IMAGE:$DOCKER_TAG"
          elif [ "$${PROJECT_BRANCH_FOUND[$project]}" -eq 0 ]; then
            docker pull "$DOCKER_IMAGE:develop"
            docker tag "$DOCKER_IMAGE:develop" "$DOCKER_IMAGE:$DOCKER_TAG"
          else
            if [[ "$project" == "contract" ]]; then
              make clone-contract BRANCH=${DRONE_BRANCH}
              make build-contract DOCKER_TAG=$DOCKER_TAG
            else
              make clone-client-solo BRANCH=${DRONE_BRANCH}
              make build-client DOCKER_TAG=$DOCKER_TAG
            fi
          fi
        done'
      - make clone-p2p BRANCH=${DRONE_BRANCH}
      - |
        if [[ "$MATCHING_BRANCH_CORE" -eq 1 ]]; then
          make clone-core BRANCH=${DRONE_BRANCH}
          make build-core DOCKER_TAG=$DOCKER_TAG
          make clone-km BRANCH=${DRONE_BRANCH}
          make build-km DOCKER_TAG=$DOCKER_TAG
        else
          docker tag "enigmampc/key_management_hw:develop" "enigmampc/key_management_hw:$DOCKER_TAG"
          docker tag "enigmampc/core-artifact-hw:develop" "enigmampc/core-artifact-hw:$DOCKER_TAG"
        fi
      - make build-worker DOCKER_TAG=$DOCKER_TAG
      - export NODES=3
      - SGX_MODE=HW docker-compose -f docker-compose.yml -f docker-compose.hw.yml up --scale worker=$NODES --exit-code-from client & sleep 240 && docker-compose exec -T client make test && export RESULT=$? || export RESULT=$?
      - docker-compose -f docker-compose.yml -f docker-compose.hw.yml down -v --rmi all || true
      - if [ $RESULT -ne 0 ]; then exit 1; fi

  - name: deploy
    image: enigmampc/docker-client
    depends_on:
      - integration
    when:
      branch:
        - develop
        - master
    privileged: true
    volumes:
      - name: sock
        path: /var/run/docker.sock
    environment:
      USERNAME:
        from_secret: username
      PASSWORD:
        from_secret: password
    commands:
      - cd docker-environment
      - echo $PASSWORD | docker login -u $USERNAME --password-stdin
      - if [[ ${DRONE_BRANCH} == "master" ]]; then export DOCKER_TAG=latest; else export DOCKER_TAG=develop; fi
      - make clone-core BRANCH=${DRONE_BRANCH}
      - make clone-p2p BRANCH=${DRONE_BRANCH}
      - make clone-km BRANCH=${DRONE_BRANCH}
      - make build-core SGX_MODE=SW DOCKER_TAG=$DOCKER_TAG 
      - make build-km SGX_MODE=SW DOCKER_TAG=$DOCKER_TAG
      - make build-worker SGX_MODE=SW DOCKER_TAG=$DOCKER_TAG
      - make build-core DOCKER_TAG=$DOCKER_TAG 
      - make build-km DOCKER_TAG=$DOCKER_TAG
      - make build-worker DOCKER_TAG=$DOCKER_TAG
      - docker push enigmampc/enigmampc/core-artifact-sw:$DOCKER_TAG
      - docker push enigmampc/worker_sw:$DOCKER_TAG
      - docker push enigmampc/key_management_sw:$DOCKER_TAG
      - docker push enigmampc/enigmampc/core-artifact-hw:$DOCKER_TAG
      - docker push enigmampc/worker_hw:$DOCKER_TAG
      - docker push enigmampc/key_management_hw:$DOCKER_TAG

volumes:
  - name: sock
    host:
      path: /var/run/docker.sock
