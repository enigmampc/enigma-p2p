/** State sync sequence **/

This part described the messages and their sequece of a node trying to synchronize its state.


Assuming this data structure as a consensus mechanism on the Ethereum network

// Enigma smart contract stores in some way or another:
+--------------------+----------------+-----------+---------+------+
| secret-contracts   | deployed code  | delta 1   | delta 2 | ...  |
| address            | + payload hash | hash      | hash    | ...  |
+--------------------+----------------+-----------+---------+------+
| 0x01...            | asd..          | h(d1)     | h(d2)   | ...  |
| 0x02...            | bk2..          | h(d1)     | h(d2)   | ...  |
| 0x03...            | sg3..          | h(d1)     | h(d2)   | ...  |
| 0x04...            | 4fh..          | h(d1)     | h(d2)   | ...  |
+--------------------+----------------+-----------+---------+------+

### What does it mean for a worker to by synced ###:

* CURRENT_ONCHAIN_CONTRACTS_NUM : The total number of contracts.
* CURRENT_ONCHAIN_CONCTRACTS_ADDRS : List of all the contract addresses.
* for each contract addr in CURRENT_ONCHAIN_CONCTRACTS_ADDRS:
    * CONTRACT_CODE
    * CURRENT_ONCHAIN_DELTAS : List of all the deltas hashes in a sequence order (delta 0 hash = initial state hash)



### The flow of a new node in the network ####:

0) Bootstrap
1) Load local state
2) Build "Hits Map" from RemoteState(Ethereum) - LocalState
3) Sync the "Hits Map" - synchronize from other peers // STATE_SYNC_REQ/RES
4) Announce (IPFS/CID) holdings (for each contract announce CID(address) )


### State sync request  - STATE_SYNC_REQ/RES ###

// get the most recent tip from a peer
// helpful to verify the peer is holding the state-delta that we need.

GET_TIP_REQ

{
    msgType : 'GET_TIP_REQ'
    contractAddress : '0x...' // the contract address we want to query the last delta from
}
GET_TIP_RES

{
    msgType : 'GET_TIP_RES'
    contractAddress : '0x...' // the response include the contract address as well for verification
    tipIndex : '' // delta number
    tipHash : '' // delta hash keccack256
}

The message exchange process during #3



After finding the peer CID provider of a contract , request :
The providing peer will respond with up to 500 deltas in each range request, each response is a chunk



SYNC_BCODE_REQ

{
    msgType : 'SYNC_BCODE_REQ'
    contractAddress : '0x...' the address of the secret-contract
}
SYNC_BCODE_RES
{
    msgType : 'SYNC_BCODE_RES'
    contractAddress : '0x...' the address of the secret-contract
    deployedByteCode : [] // byte array of the deployed byte code (does not include state[0])
}


SYNC_STATE_REQ

{
    msgType : 'SYNC_STATE_REQ'
    contractAddress : '0x...' the address of the secret-contract,
    fromIndex: '', // start index (include)
    toIndex : '', // end index (include)
    fromHash : '',
    toHash : ''
}

SYNC_STATE_RES

{
    msgType : 'SYNC_STATE_RES'
    contractAddress : '0x...' the address of the secret-contract,
    states : [{index,hash,data}...] // the actual state deltas
}




### Stream Flow ###

OnBoot:

0) Bootstrap
1) Load current state from local db
2) get missing states from ethereum
3) request states from peers using IPFS
4) announce synched

On Provide Request - Stream only flow :

Requester -> LocalDB -> Requester -> repeat ?

On Sync Request - Stream only flow :

Missing state -> Provider Peer -> Sliding Window -> Validate Hashes -> repeat ?











